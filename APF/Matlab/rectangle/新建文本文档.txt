double EuclideanDistance(double sol[D], double goal_x, double goal_y)//计算某一点和终点的欧几里德距离{
	double did;
	did = sqrt((sol[0] - goal_x) * (sol[0] - goal_x) + (sol[1] - goal_y) * (sol[1] - goal_y));
	return did;
}

double distance_to_line(double p[], double line_s[], double line_e[])
{
	double face;
	if ((p[0] - line_s[0]) * (line_s[1] - line_e[1]) - (p[1] - line_s[1]) * (line_s[0] - line_e[0]) <= 0)
		return EuclideanDistance(p, line_s[0], line_s[1]);
	else if ((p[0] - line_e[0]) * (line_e[0] - line_s[0]) + (p[1] - line_e[1]) * (line_e[1] - line_s[1]) <= 0)
		return EuclideanDistance(p, line_e[0], line_e[1]);
        else{
		face = fabs((p[0] - line_e[0]) * (line_s[1] - line_e[1]) - (p[1] - line_s[1]) * (line_s[0] - line_e[0]));
		return face / EuclideanDistance(line_e, line_s[0], line_s[1]);
	}
}

double cross_point(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4)
{
	double x, y, a, b;
	a = multi(x4, y4, x2, y2, x1, y1);
	b = multi(x3, y3, x2, y2, x1, y1);
	x = (a * x3 - b * x4) / (a - b);
	y = (a * y3 - b * y4) / (a - b);
}

int path_cross_check(double x1, double y1, double x2, double y2, double a1, double b1, double a2, double b2)
{
	double fc, fd, fa, fb;
	fc = (b1 - y1) * (x1 - x2) - (a1 - x1) * (y1 - y2);
	fd = (b2 - y1) * (x1 - x2) - (a2 - x1) * (y1 - y2);
	if ((fc * fd) < 0){
		fa = (y1 - b1) * (a1 - a2) - (x1 - a1) * (b1 - b2);
		fb = (y1 - b1) * (a1 - a2) - (x1 - a1) * (b1 - b2);
		if ((fa * fb) < 0)
			return 1;
	}
	return 0;
}
double multi(double x1, double y1, double x2, double y2, double x0, double y0)
{
	return (x1 - x0) * (y2 - y0) - (x2 - x0) * (y1 - y0);
}